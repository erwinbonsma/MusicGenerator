from argparse import ArgumentParser

tab = "    "
notes = ["A", "As", "B", "C", "Cs", "D", "Ds", "E", "F", "Fs", "G", "Gs"]
waves = ["TRIANGLE", "TILTED_SAW", "SAW", "SQUARE", "PULSE", "ORGAN", "NOISE", "PHASER"]
effects = ["NONE", "SLIDE", "VIBRATO", "DROP", "FADE_IN", "FADE_OUT", "ARPEGGIO", "ARPEGGIO_FAST"]

parser = ArgumentParser()
parser.add_argument(
    "filename", help="PICO-8 source file"
)
args = parser.parse_args()

looping_sfx = set()

def numval(line, pos, len):
    return int(line[pos:pos+len], 16)

def numnotes(sfx_line):
    for i in range(32, 0, -1):
        if sfx_line[8+(i-1)*5+3] != "0":
            return i
    return 0

def numtunes(pattern_line):
    return len([i for i in range(4) if numval(pattern_line, 3+i*2, 2) < 64])

def output_note(notespec):
    #print("notespec =", notespec)
    volume = numval(notespec, 3, 1)
    if volume == 0:
        print("%sSILENCE," % (tab))
        return
    noderank = numval(notespec, 0, 2)
    note = notes[(noderank + 3) % 12]
    octave = 2 + int((noderank + 3) / 12)
    wave = waves[numval(notespec, 2, 1)]
    effect = effects[numval(notespec, 4, 1)]
    print("%sNoteSpec { .note=Note::%s, .oct=%d, .vol=%d, .wav=WaveForm::%s, .fx=Effect::%s }," %
        (tab, note, octave, volume + 1, wave, effect)
    )

def output_sfx(line, sfx_id):
    speed = numval(line, 2, 2)
    loop_start = numval(line, 4, 2)
    loop_end = numval(line, 6, 2)
    num_notes = 32 # numnotes(line)
    if loop_end == 0:
        loop_end = num_notes
        loop_start = loop_end
    if loop_end != loop_start:
        looping_sfx.add(sfx_id)

    print("const NoteSpec sfx%dNotes[%d] = {" % (sfx_id, num_notes))
    for i in range(num_notes):
        output_note(line[8+i*5:13+i*5])
    print("};")

    print("const TuneSpec sfx%d = TuneSpec {" % (sfx_id))
    print("%s.noteDuration = %d, .loopStart = %d, .numNotes = %d, .notes = sfx%dNotes" %
        (tab, speed, loop_start, loop_end, sfx_id)
    )
    print("};")

def output_pattern(line, pattern_idx):
    num_tunes = numtunes(line)
    if num_tunes == 0:
        return
    sfx_ids = [id for id in [numval(line, 3+i*2, 2) for i in range(4)] if id < 64]
    if len([id for id in sfx_ids if not id in looping_sfx]) == 0:
        print("// WARNING: All sound effects in pattern loop!")
    elif sfx_ids[0] in looping_sfx:
        print("// WARNING: First sound effect in pattern loops")

    print("const TuneSpec* pattern%dTunes[%d] = { %s };" %
        (pattern_idx, num_tunes, ", ".join(["&sfx%d" % (id) for id in sfx_ids]))
    )

    print("const PatternSpec pattern%d = PatternSpec {" % (pattern_idx))
    print("%s.numTunes = %d, .tunes = pattern%dTunes" % (tab, num_tunes, pattern_idx))
    print("};")

def process_file(filename):
    print("// This file is automatically generated using import-from-p8.py")
    print()
    with open(filename) as fp:
        phase = 0
        num_sfx = 0
        num_patterns = 0
        for line in fp:
            if phase==0:
                if line.startswith("__sfx__"):
                    phase = 1
            elif phase==1:
                if line.startswith("__music__"):
                    print()
                    phase = 2
                else:
                    output_sfx(line, num_sfx)
                    num_sfx += 1
            elif phase==2:
                if len(line) >= 11:
                    output_pattern(line, num_patterns)
                    num_patterns += 1
                else:
                    phase = 3

process_file(args.filename)